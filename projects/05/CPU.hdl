// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Mux16 (a=instruction[0..15], b=aluout, sel[0]=instruction[15], out[0..15]=mux1out);
    Not (in=instruction[15], out=not1out);
    And (a=instruction[5], b=instruction[15], out=and1out);
    Or (a=not1out, b=and1out, out=or1out);
    ARegister (in=mux1out, load=or1out, out[0..15]=aregout, out[0..14]=addressM[0..14]);

    Mux16 (a=aregout, b=inM[0..15], sel[0]=instruction[12], out=mux2out);
    And (a=instruction[4], b=instruction[15], out=and2out);
    DRegister (in=aluout, load=and2out, out=dregout);
    ALU (x=dregout, y=mux2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out[0..15]=aluout, zr=zrout, ng=ngout, out[0..15]=outM[0..15]);
    And (a=instruction[15], b=instruction[3], out=writeM);

    Or (a=zrout, b=ngout, out=or2out);
    Not (in=or2out, out=not2out);
    And (a=not2out, b=instruction[0], out=and5out);
    And (a=instruction[1], b=zrout, out=and4out);
    Or (a=and4out, b=and5out, out=or3out);
    And (a=instruction[2], b=ngout, out=and3out);
    Or (a=and3out, b=or3out, out=or4out);

    And (a=instruction[15], b=or4out, out=and6out);
    Not (in=and6out, out=not4out);

    PC (in=aregout, load=and6out, inc=not4out, reset=reset, out[0..14]=pc[0..14]);

    //// Replace this comment with your code.
}
